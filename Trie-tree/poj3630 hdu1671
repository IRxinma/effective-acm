#include<stdio.h>
#include<iostream>
using namespace std;
const int maxn = 10;
typedef struct TrieNode{
    int nCount;
    struct TrieNode *nxt[maxn];
}TrieNode;
TrieNode Memory[1000000];
int allocp=0;
bool flag;
void InitTrieRoot(TrieNode **pRoot){
    *pRoot=NULL;
}
TrieNode *CreateTrieNode(){
    int i;
    TrieNode *p;
    p=&Memory[allocp++];
    p->nCount=0;
    for(i=0;i<maxn;i++) p->nxt[i]=NULL;
    return p;
}
void InsertTrie(TrieNode **pRoot,char *s){
    int i,k;
    TrieNode *p;
    if(!(p=*pRoot)) p=*pRoot=CreateTrieNode();
    i=0;
    while(s[i]){
        k=s[i++]-'0';
        if(p->nxt[k]){
            if(p->nxt[k]->nCount==1 || s[i]=='\0'){
                flag=false; return ;
            }
        }
        else p->nxt[k]=CreateTrieNode();
        p=p->nxt[k];
            //p->next[k]->nCount++;
        //else p->next[k]=CreateTrieNode();
        //p=p->next[k];
    }
    p->nCount=1;
}
/*int SearchTrie(TrieNode **pRoot,char *s){
    TrieNode *p;
    int i,k;
    if(!(p=*pRoot)) return 0;
    i=0;
    while(s[i]){
        k=s[i++]-'a';
        if(p->next[k]==NULL) return 0;
        p=p->next[k];
    }
    return p->nCount;
}*/
int main(){
    char str[50];
    TrieNode *Root=NULL;
    int T, n;
    scanf("%d", &T);
    while(T--){
        flag=true;
        allocp=0;
        scanf("%d",&n);
        InitTrieRoot(&Root);
        for(int i=0; i<n; i++){
            scanf("%s", str);
            if(flag) InsertTrie(&Root, str);
        }
        if(flag) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
