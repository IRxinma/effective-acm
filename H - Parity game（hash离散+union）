#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<stack>
#include<climits>
#include<vector>
#include<string>
#include<map>
using namespace std;
/*
对于整数x，y：
    其模2意义下的值等于其原数&1；
    模2意义下的加减法等价于^.
    模2意义下的乘除法等价于&.
*/
const int maxn = 5e3*3;
int pre[maxn], res[maxn], r[maxn];
struct node{
    int u, v;
    bool flag;
    node(){}
    node(int _u, int _v, int _flag):u(_u),v(_v),flag(_flag){}
};
node s[maxn];
int n, m, ans, flag, ret;

int Binsearch(int val){
    int l=1, r=ret, mid;
    while(l<=r){
        mid=l+(r-l)/2;
        if(res[mid]>val) r=mid-1;
        else if(res[mid]<val) l=mid+1;
        else break;
    }
    return mid;
}

int find(int x){
    if(x==pre[x]) return x;
    int tmp=find(pre[x]);
    r[x]^=r[pre[x]];
    return pre[x]=tmp;
}

bool union_set(int u, int v, int k){
    int fu=find(u); //cout << fu << "\/";
    int fv=find(v); //cout << fv << endl;
    if(fu==fv){
        if(r[u]^r[v]!=k){
            flag=0; return flag;
        }
    }
    else if(fu>fv){
        pre[fu]=fv;
        r[fu]=r[u]^k^r[v];
    }
    else{
        pre[fv]=fu;
        r[fv]=r[u]^k^r[v];
    }
    ++ ans;
}

int main(){
    char ch[10];
    int u, v, cnt;
    while(~scanf("%d", &n)&&n!=-1){
        scanf("%d", &m);
        for(int i=0; i<maxn; i++){
            pre[i]=i; r[i]=0;
        }
        cnt=0;
        for(int i=1; i<=m; i++){
            scanf("%d%d%s", &u, &v, ch);
            u--;
            s[i].u=u; s[i].v=v;
            if(ch[0]=='e') s[i].flag=0;
            else s[i].flag=1;
            res[++cnt]=u; res[++cnt]=v;
        }
        sort(res+1, res+1+cnt);
        //for(int i=1; i<=cnt; i++) cout << res[i] << " "; cout<<endl;
        ret=unique(res+1,res+1+cnt)-res-1;
        //cout << ret << ".." << cnt << endl;
        //for(int i=1; i<=ret; i++) cout << res[i] << " "; cout<<endl;
        ans = 0; flag=1;
        for(int i=1; i<=m; i++){//cout <<s[i].u<<"."<<s[i].v<<endl;
            u=Binsearch(s[i].u); //cout<<v<<"...";
            v=Binsearch(s[i].v); //cout<<v<<endl;
            union_set(u, v, s[i].flag);
            if(!flag) break;
        }
        printf("%d\n", ans);
    }
    return 0;
}
