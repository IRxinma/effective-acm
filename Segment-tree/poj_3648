//#include<bits/stdc++.h>
#include<cstdio>
#include<iostream>
using namespace std;
#define root 1, n, 1
#define lson l, m, rt<<1
#define rson m+1, r, rt<<1|1
typedef long long ll;
const int maxn = 1e5+5;
ll add[maxn<<2], sum[maxn<<2];
struct node
{
	int l, r;
	int mid()
	{
		return (l+r)>>1;
	}
};
node tree[maxn<<2];
void pushup(int rt)
{
	sum[rt]=sum[rt<<1]+sum[rt<<1|1];
}

void pushdown(int rt, int w)
{
	if(add[rt])
	{
		add[rt<<1]+=add[rt];
		add[rt<<1|1]+=add[rt];
		sum[rt<<1]+=add[rt]*(w-w/2);
		sum[rt<<1|1]+=add[rt]*(w>>1);
		add[rt]=0;
	}
}

void build(int l, int r, int rt)
{
	tree[rt].l=l;
	tree[rt].r=r;
	add[rt]=0;
	if(tree[rt].l==tree[rt].r)
	{
		scanf("%lld", &sum[rt]);
		return ;
	}
	int m=tree[rt].mid();
	build(lson);
	build(rson);
	pushup(rt);
}

void update(int s, int l, int r, int rt)
{
	if(l<=tree[rt].l && tree[rt].r<=r)
	{
		add[rt]+=s;
		sum[rt]+=s*(ll(tree[rt].r-tree[rt].l+1));
		return ;
	}
	pushdown(rt, tree[rt].r-tree[rt].l+1);
	int m=tree[rt].mid();
	if(l<=m)
		update(s, l, r, rt<<1);
	if(r>m)
		update(s, l, r, rt<<1|1);
	pushup(rt);
}

ll query(int l, int r, int rt)
{
	if(l<=tree[rt].l && tree[rt].r<=r)
	{
		return sum[rt];
	}
	pushdown(rt, tree[rt].r-tree[rt].l+1);
	int m=tree[rt].mid();
	ll res=0;
	if(l<=m)
		res+=query(l, r, rt<<1);
	if(r>m)
		res+=query(l, r, rt<<1|1);
	return res;
}

int main()
{
	int n, q;
	while(~scanf("%d%d", &n, &q))
	{
		build(root);
		char op[5];
		int a, b, c;
		while(q --)
		{
			scanf("%s", op);
			if(op[0]=='Q')
			{
				scanf("%d%d", &a, &b);
				printf("%lld\n", query(a, b, 1));
			}
			else
			{
				scanf("%d%d%d", &a, &b, &c);
				update(c, a, b, 1);
			}
		}
	}
	return 0;
}
