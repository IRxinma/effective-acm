#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<stack>
#include<climits>
#include<vector>
#include<string>
#include<map>
using namespace std;
const int maxn = 1010;
const int inf = 1<<29;
int p[maxn][maxn], n, m, s;

void Dijkstra(){
    int d[maxn], dback[maxn];
    bool vis[maxn];
    for(int i=1; i<=n; i++){
        vis[i]=false;
        d[i]=p[s][i];
        dback[i]=p[i][s];
    }
    for(int i=1; i<=n; i++){
        int k=-1;
        int Min=inf;
        for(int j=1; j<=n; j++){
            if(!vis[j] && d[j]<Min){
                Min=d[j];
                k=j;
            }
        }
        //if(k==-1) break;
        vis[k]=true;
        for(int j=1; j<=n; j++){
            if(!vis[j] && d[j]>d[k]+p[k][j]){
                d[j]=d[k]+p[k][j];
            }
        }
    }

    for(int i=1; i<=n; i++) vis[i]=false;

    for(int i=1; i<n; i++){
        int k=-1;
        int Min=inf;
        for(int j=1; j<=n; j++){
            if(!vis[j] && dback[j]<Min){
                Min=dback[j];
                k=j;
            }
        }
        //if(k==-1) break;
        vis[k]=true;
        for(int j=1; j<=n; j++){
            if(!vis[j] && dback[j]>dback[k]+p[j][k]){
                dback[j]=dback[k]+p[j][k];
            }
        }
    }
    int ans=0;
    for(int i=1; i<=n; i++){
        //cout << d[i] << "..." << dback[i] << endl;
        ans=max(ans, d[i]+dback[i]);
    }
    printf("%d\n", ans);
}

int main(){
    while(~scanf("%d%d%d", &n, &m, &s)){
        for(int i=1; i<=n; i++)
            for(int j=1; j<=n; j++)
                if(i!=j) p[i][j]=inf;
                else p[i][j]=0;
        for(int i=1; i<=m; i++){
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            p[a][b]=c;
        }
       Dijkstra();
    }
    return 0;
}
