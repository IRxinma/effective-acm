/*
it's my understanding.
Dijkstra algorithm is a typical shortest path routing algorithm, it used to calculated a node to all other nodes of the shortest 
path. the main characteristics is the starting point as the center to the outer layers of extension, until it is entendend to the end.
but a lot of computing nodes to traverse it, so inefficient.
the whole process:
  initially, S contians only source. U is a vertex of G. from the source to the U and only through S intermediate vertex road was 
called special path from the source to U. and recorded the shortest special path length corresponding to each vertax with the array
dist, and put u into S. once S contians all the vertices in V,dist is recorded from the source to the length of shortest path between
all the other vertices.
O(N^2) but it can't handle negative right loop.
*/
const int maxn = 1010;
const int inf = 0x3f3f3f3f;
bool vis[maxn];
int pre[maxn];
void Dijkstra(int cost[][maxn], int lowcost[], int n, int beg){
    for(int i=0; i<n; i++){
        lowcost[i]=inf; vis[i]=false; pre[i]=-1;
    }
    lowcost[beg]=0;
    for(int j=0; j<n; j++){
        int k=-1;
        int Min=inf;
        for(int i=0; i<n; i++){
            if(!vis[i] && lowcost[i]<Min){
                Min=lowcost[i];
                k=i;
            }
        }
        if(k==-1) break;
        vis[k]=true;
        for(int i=0; i<n; i++){
            if(!vis[i] && lowcost[k]+cost[k][i]<lowcost[i]){
                lowcost[i]=lowcost[k]+cost[k][i];
                pre[i]=k;
            }
        }
    }
}

//use priority_queue O(ElogE)
const int maxn = 1000010;
const int inf = 0x3f3f3f3f;
struct qnode{
    int v;
    int c;
    qnode(int _v=0, int _c=0):v(_v),c(_c){}
    bool operator < (const qnode &r)const{
        return c > r.c;
    }
};
struct Edge{
    int v, cost;
    Edge(int _v=0, int _cost=0):v(_v),cost(_cost){}
};
vector<Edge>E[maxn];
bool vis[maxn];
int dist[maxn];
//point number staring from 1
void Dijkstra(int n, int start){
    memset(vis, false, sizeof(vis));
    for(int i=1; i<=n; i++) dist[i]=inf;
    priority_queue<qnode>que;
    while(!que.empty()) que.pop();
    dist[start]=0;
    que.push(qnode(start, 0));
    qnode tmp;
    while(!que.empty()){
        tmp=que.top(); que.pop();
        int u=tmp.v;
        if(vis[u]) continue;
        vis[u]=true;
        for(int i=0; i<E[u].size(); i++){
            int v=E[tmp.v][i].v;
            int cost=E[u][i].cost;
            if(!vis[v] && dist[v]>dist[u]+cost){
                dist[v]=dist[u]+cost;
                que.push(qnode(v, dist[v]));
            }
        }
    }
}
