#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<stack>
#include<climits>
#include<vector>
#include<string>
#include<map>
using namespace std;
const int maxn = 1010;
int p[maxn][maxn], n, m;

int bellman_ford(){
    bool vis[maxn];
    int dist[maxn];
    for(int i=1; i<=n; i++) dist[i]=p[1][i];
    for(int i=1; i<n; i++){
        bool flag=false;
        for(int j=1; j<=n; j++){
            for(int k=1; k<=n; k++){
                if(p[j][k] && dist[k]<min(dist[j], p[j][k]))
                    dist[k]=min(dist[j], p[j][k]), flag=true;
                if(p[k][j] && dist[j]<min(dist[k], p[k][j]))
                    dist[j]=min(dist[k], p[k][j]), flag =true;;
            }
        }
        if(!flag) return dist[n];
    }
    return dist[n];
}

int main(){
    int t, cases=0;
    scanf("%d", &t);
    while(t--){
        scanf("%d%d", &n, &m);
        for(int i=1; i<=n; i++)
            for(int j=1; j<=n; j++)
                p[i][j]=0;
        for(int i=1; i<=m; i++){
            int a, b, c;
            scanf("%d%d%d", &a, &b, &c);
            p[a][b]=p[b][a]=c;
        }
        printf("Scenario #%d:\n%d\n\n", ++cases, bellman_ford());
    }
    return 0;
}
