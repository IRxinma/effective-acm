#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<stack>
#include<climits>
#include<vector>
#include<string>
#include<map>
using namespace std;
/*
topic: there are two frogs and numberof stone.now we konw coordinates of these things.two frogs' coodinates
are the first and second.now frog A wants to go to frog B using jumping. so the title asked to seek maximum s 
to the minimum viable path of t. 
*/
const int maxn = 201;
const int inf = 0x3f3f3f3f;
typedef struct{
	int x,y;
}Point;
Point point[maxn];
double dist[maxn]; //maximum edge of i->i's path
int n;
bool vis[maxn];
double dis(Point a,Point b){
	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}

void dijkstra(){
	for(int i=1;i<=n;i++){dist[i]=inf; vis[i]=false;}
	dist[1]=0;
	for(int i=1;i<n;i++){
		double Min=inf;
		int k=-1;
		for(int j=1;j<=n;j++)
			if(!vis[j] && dist[j]<Min){
				Min=dist[j];
				k=j;
			}
        //if(k==-1) return;
		vis[k]=1;
		if(k==2) break;
		for(int j=1;j<=n;j++)
			if(!vis[j] && dist[j]>max(dist[k],dis(point[k],point[j]))){
				dist[j]=max(dist[k],dis(point[k],point[j]));
            }
	}
}

int main(){
	int i,cnt=1;
	while(scanf("%d",&n) && n){
		for(i=1;i<=n;i++) scanf("%d%d",&point[i].x,&point[i].y);
		dijkstra();//for(int i=1;i<=n; i++) printf("%.3f\n",dist[i]);
		printf("Scenario #%d\nFrog Distance = %.3f\n\n",cnt++,dist[2]);
	}
	return 0;
}
