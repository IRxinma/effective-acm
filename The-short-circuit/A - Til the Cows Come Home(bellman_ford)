#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<stack>
#include<climits>
#include<vector>
#include<string>
#include<map>
using namespace std;
const int maxn = 2010;
const int inf = 0x3f3f3f3f;
int dist[maxn];
int n, m;
struct Edge{
    int u, v, w;
    Edge(int _u=0,int _v=0,int _w=0):u(_u),v(_v),w(_w){}
};
Edge edge[maxn];
bool bellman_ford(){
    for(int i=0; i<n; i++) dist[i]=inf;
    dist[0]=0;
    for(int i=1; i<n; i++){
        bool flag = false;
        for(int j=0; j<m; j++){
            int u=edge[j].u;
            int v=edge[j].v;
            int w=edge[j].w;
            if(dist[v]>dist[u]+w){dist[v]=dist[u]+w; flag=true;}
            if(dist[u]>dist[v]+w){dist[u]=dist[v]+w; flag=true;}
        }
        //if(!flag) return false;
        if(!flag){printf("%d\n", dist[n-1]); return true;}
    }
    /*for(int i=0; i<m; i++)
        if(dist[edge[j].v] > dist[edge[j].u]+edge[j].w)
            return false;
    return true;*/
    printf("%d\n", dist[n-1]);
}

int main(){
    int a, b, c;
    while(~scanf("%d%d",&m, &n)){

        for(int i=0; i<m; i++){
            scanf("%d%d%d", &a, &b, &c);
            edge[i].u=a-1; edge[i].v=b-1; edge[i].w=c;
        }
        bellman_ford();
    }
    return 0;
}
